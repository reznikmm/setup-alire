name: 'Alire Setup'
description: 'Install Alire package manager'
author: 'Alire Project'

inputs:
  version:
    description: Use this argument to install a stable release. Use a version number without v prefix, e.g., 1.0.1, 1.1.0. This argument will be ignored if a branch argument is supplied. Defaults to the latest stable release.
    required: false
    default: '1.2.1'
  branch:
    description: Use this argument to install a development branch (e.g., master). Using this option will require a preexisting compiler in the workflow environment.
    required: false
    default: ''
  toolchain:
    description: Arguments to pass to `alr toolchain` after setup.
    required: false
    default: 'gnat_native gprbuild'
  toolchain_dir:
    description: Location to install toolchain under.
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Reuse cached installation, only for default toolchain locations
      if: ${{ inputs.toolchain_dir == '' }}
      id: cache-alr
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/alire
          ~/.config/alire
          ./alire_install
        key: alr-v${{ inputs.version }}-b_${{ inputs.branch }}-t_${{ inputs.toolchain }}-o_${{ runner.os }}-4
        # .cache contains msys64 install on Windows
        # .config contains the toolchain at the default location, besides index config
        # Final number is used to forcibly invalidate cache

    - if: ${{ steps.cache-alr.outputs.cache-hit != 'true' }}
      uses: alire-project/setup-alire@v1  # v1 is the actual installer, uncached
      with:
        version: ${{ inputs.version }}
        branch: ${{ inputs.branch }}
        toolchain: ${{ inputs.toolchain }}
        toolchain_dir: ${{ inputs.toolchain_dir }}

    - if: ${{ steps.cache-alr.outputs.cache-hit == 'true' && runner.os != 'Windows' }}
      shell: bash
      run: |
        echo "Restoring Linux/macOS PATH: $PWD/alire_install/bin"
        echo "$PWD/alire_install/bin" >> $GITHUB_PATH

    - if: ${{ steps.cache-alr.outputs.cache-hit == 'true' && runner.os == 'Windows' }}
      shell: pwsh
      run: |
        echo "Restoring Windows PATH: ${PWD}\alire_install\bin"
        Add-Content $env:GITHUB_PATH "${PWD}\alire_install\bin"

